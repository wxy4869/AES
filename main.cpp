#include <cstdio>
#include "cipher.h"
#include "inv_cipher.h"
#include "key_expansion.h"

void PrintText(u_int8_t text[]) {
    for (int i = 0; i < 16; i++) {
        printf("%02x", text[i]);
    }
    printf("\n");
}

void test(u_int8_t plaintext[], u_int8_t key[], int key_length) {
    u_int8_t ciphertext[16] = {};
    u_int8_t plaintext_[16] = {};
    u_int8_t * w = MallocW(key_length);
    KeyExpansion(key, w);

    printf("初始: ");
    PrintText(plaintext);

    printf("加密: ");
    Cipher(plaintext, ciphertext, w);
    PrintText(ciphertext);

    printf("解密: ");
    InvCipher(ciphertext, plaintext_, w);
    PrintText(plaintext_);
}

void test_128_1() {
    printf("\n附录 B\n");
    u_int8_t plaintext[] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
    u_int8_t key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
    test(plaintext, key, 128);
}

void test_128_2() {
    printf("\n附录 C.1\n");
    u_int8_t plaintext[] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
    u_int8_t key[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
    test(plaintext, key, 128);
}

void test_192() {
    printf("\n附录 C.2\n");
    u_int8_t plaintext[] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
    u_int8_t key[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};
    test(plaintext, key, 192);
}

void test_256() {
    printf("\n附录 C.3\n");
    u_int8_t plaintext[] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
    u_int8_t key[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
    test(plaintext, key, 256);
}

int main() {
    // test_128_1();
    test_128_2();
    test_192();
    test_256();
    return 0;
}
